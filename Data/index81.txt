C:\itmo\OP\10TTaskScheduler\cmake-build-debug\_deps\googletest-src\docs\faq.md
4704
0 7
1 7
100 2
2 5
3 3
4 4
49 2
5 4
: 15
::testing::message 1
::testing::test 5
\ 1
\\d 2
_ 14
__ 1
_bar 1
_crtmemcheckpoint 1
_crtmemdumpallobjectssince 1
_foo 1
_foo_testname_test 1
_test 1
a 103
abc 5
abcdeathtest 2
able 2
abort 2
about 6
abseil 1
accidental 1
accidentally 1
accommodate 1
according 1
accordingly 1
across 1
activities 1
actual 1
actually 2
ad 1
add 2
add_failure 1
addition 3
additional 3
admittedly 1
advanced 3
advantage 1
advise 1
after 3
afterward 1
afterwards 1
against 2
all 9
allocations 1
allow 1
allowed 2
already 3
also 5
among 1
an 20
and 73
another 1
any 8
anywhere 2
approach 1
approaches 1
are 20
area 1
aren 1
argument 6
argv 1
as 32
ask 1
assert 1
assert_ 3
assert_death 8
assert_eq 3
assert_ne 2
assert_pred 1
assert_xx 2
assertion 9
assertions 8
at 6
attribute 1
avoid 2
away 2
b 1
back 1
bad 1
bar 16
bar::cooltest 1
bar_ 1
bartest 11
base 8
based 1
basetest 8
basetest::setup 1
basetest::teardown 1
basically 1
baz 1
bazel 1
be 32
be: 1
because 5
been 2
before 6
beginning 1
behave 1
behavior 1
being 1
believe 1
benefit 1
benefits: 1
best 1
better 2
between 2
blah 5
blah_blah 1
blob 1
body 4
boils 1
bool 1
both 4
break 4
breaks 2
broken 3
brushes 1
buffer 1
bug 5
build 3
bullet 1
bunch 1
buried 1
but 16
by 16
bypass 1
c 26
call 14
called 2
caller 1
calling 2
callout 2
calls 3
can 40
cannot 7
case 16
cases 2
cases: 1
cause 2
cc 5
cc: 2
chance 2
change 4
changes 1
changing 1
chastain 1
check 1
child 3
choice 2
class 27
classes 1
clean 1
cleaning 1
clear 1
clearly 1
cleverness 1
client 1
code 17
com 1
combined 2
commenting 1
common 5
comparison 1
compile 1
compiled 2
compiler 14
compilers 1
complain 1
complaining 1
complains 6
complete 1
complex 2
complexexpression 1
complicated 1
compound 2
compoundstatement 1
concise 1
concrete 2
concurrent 1
condition 1
conditions 1
conflicts 1
confuse 1
consecutive 1
consequences 1
consider 2
considered 1
considering 1
consistency 1
const 9
constexpr 2
constraining 1
constructor 17
constructors 2
contain 3
contains 4
contaminating 1
content 1
context 1
continue 1
contradicts 1
control 1
convenient 1
cooltest 6
correct 1
corresponding 1
cost 1
could 4
count 1
crash 1
create 6
created 2
createinstance 1
creating 2
cross 1
ctorvssetup 1
current 1
currently 2
d 2
danger 1
dangerous 2
data 4
deadlocks 1
death 24
deathtest 2
debug 1
debugging 1
decide 2
decided 2
declaration 1
declare 1
declared 2
decrements 1
deep 1
def 5
default 7
defdeathtest 2
define 8
defined 6
defines 2
definition 5
definitions 2
delete 1
delicate 1
depend 1
dependency 1
dependency_injection 1
depending 1
deprecated 1
derive 2
derived 6
derives 1
deriving 1
descriptor 3
descriptors 1
destructor 10
destructors 2
details 5
detect 1
detector 1
determine 2
deterministic 1
did 2
didn 2
die 1
dies 1
differences 2
different 13
differently 1
difficult 3
disable 1
disabled 3
disabled_ 2
disabling 1
disallow_evil_constructors 1
discouraged 1
dispatch 1
do 13
docs 1
does 12
doesn 11
don 8
done 2
dosomething 4
down 6
due 3
dynamic 1
e 9
each 8
early 1
easier 2
easiest 1
easily 5
easy 3
effects 2
either 2
eliminate 2
empty 1
en 2
enabled 2
encouraging 1
end 4
ending 1
ends 2
ensure 2
entire 2
equalsproto 1
error 5
errors 5
escaping 1
etc 4
even 4
everything 1
example 4
example: 1
examples 1
exception 1
exceptions 4
exclude 1
exec 1
executable 2
executed 1
executing 1
execution 2
existing 1
expect 1
expect_ 1
expect_call 1
expect_death 6
expect_death_m 1
expect_eq 8
expect_ne 6
expect_pred 2
expect_that 1
expect_true 1
expect_xx 2
expected 3
experience 1
explains 1
explicitly 1
expression 2
extension 1
extreme 1
fact 1
factory 2
fail 1
failed 4
fails 3
failure 2
failures 1
fake 1
faq 1
fatal 1
faults 1
few 1
file 2
finally 1
fine 1
finishes 1
first 10
fix 5
fixed 2
fixture 27
fixture: 1
fixtures 7
fixtures: 1
flag 1
flies_like_an_arrow 1
follow 2
followed 3
following 7
fonts 1
foo 24
foo::cooltest 1
foo::kbar 1
foo_ 1
foo__testname_test 1
foodeathtest 4
footest 28
footest::footest 1
footype 4
for 36
force 1
forgetting 1
fork 1
form 2
former 1
fresh 2
friendly 1
from 20
fully 2
func1 2
function 16
functionality 1
functioncall 1
functions 4
future 1
g 7
gcc 4
general 1
generate 2
generated 1
generates 3
get 7
getting 1
github 1
give 2
gives 3
global 6
gmock 1
go 3
going 1
good 3
google 1
googletest 31
got 1
grasp 1
growth 1
gtest_also_run_disabled_tests 1
gtest_output 1
guaranteed 2
gui 1
guide 2
guidelines: 1
h 2
hack 2
hacky 1
had 2
hangs 1
happen 1
happens 1
hard 1
harder 3
has 15
have 27
having 1
heap 3
heisenbug 1
heisenbugs 1
help 2
helps 3
here 2
here: 1
hierarchy 1
historically 1
hoc 1
hope 1
horrible 1
how 9
however 8
html 1
htonl 10
http: 3
https: 2
human 1
i 37
idea 1
identifier 2
identifiers 1
identify 1
if 49
ignore 1
ignored 1
ignores 1
ignoring 3
immediate 1
immediately 1
implementation 6
implementations 5
implemented 2
implicit_cast 1
implicitly 1
important 1
impossible 1
in 96
include 1
includes 1
incur 1
indeed 1
independent 1
individual 1
inefficient 1
information 1
initialize 2
initialized 2
initializer 2
initializing 1
inject 1
injection 1
inline 1
inside 6
insideloop 1
instances 2
instantiate_test_suite_p 1
instead 7
int 5
integral 1
interface 3
interleave 2
into 2
introduce 1
invalid 8
invest 1
invoke 1
invokes 1
io 1
is 74
isn 1
it 69
iteration 2
its 8
itself 2
joined 1
joins 1
just 9
justify 1
kbar 3
keep 1
kept 1
keywords 1
kill 2
killed 1
know 2
later 1
leads 2
leak 3
leaking 1
leaks 1
lease 1
leaving 1
less 3
let 2
letter 3
libraries 1
library 5
library: 1
like 6
like: 1
like_an_arrow 1
likely 2
limit 1
limitations 1
line 1
link 1
linker 1
linux 2
list 1
ll 2
local 1
log 7
logic 6
long 1
longer 1
look 1
looks 1
loop 1
lost 1
lucky 1
mac 1
machine 1
macro 5
macros 6
main 5
maintain 2
make 13
makes 5
making 5
man 1
manager 3
many 3
master 2
match 2
matcher 4
matchers 3
matching 2
may 14
md 5
me 1
mean 2
means 8
meant 1
member 7
member: 1
memory 4
message 3
messages 8
meta 2
method 6
methods 4
michael 1
middle 1
might 1
mind 1
minimize 1
mistake 2
mistakes 1
mix 1
mock 1
mocking 1
mocks 1
mode 3
modifies 1
modulo 1
more 13
most 1
move 3
moving 1
msdn 1
much 2
multiple 5
must 7
my 8
my_concrete_impl 2
my_field: 1
my_test 1
mydeathtest 4
myinterface 1
mymessage 1
name 10
named 3
names 5
namespace 9
namespaces 1
nearly 1
necessary 4
need 15
needed 1
needed: 1
needs 8
never 3
new 10
next 2
no 13
non 4
normally 1
not 22
note 3
note: 2
now 7
nptl 1
null 12
nullptr 6
number 1
object 3
object2 1
objects 3
observable 1
obviously 1
occurred 1
of 56
often 2
ok 1
on 13
once 2
one 7
ones 1
only 8
operate 1
operation 2
operator 3
opposed 1
opt 3
option 1
or 26
order 4
org 2
os 1
other 2
others 1
otherwise 2
ought 1
our 1
out 1
output 7
outside 2
over 1
overridden 1
override 2
own: 1
parallel 1
parameter 1
parameterized 5
parameters 1
parent 5
particular 9
pass 2
passed 1
path 1
paths 1
pattern 1
patterns 1
peculiarity 2
people 3
per 1
permanent 1
place 1
placement 2
platform 1
platforms 2
please 2
pointer 1
pointers 1
pollute 1
portable 1
possible 3
practice 2
prefer 2
preferred 2
prefix 2
pretty 1
prevent 2
prevents 1
previous 1
print 2
printing 1
prints 2
private 1
probably 1
problem 3
problems 2
process 8
processes 2
produce 1
production 4
program 8
programming 3
prohibited 1
prone 1
propagate 1
protected: 2
proto 5
protocol 2
protocolmessageequals 4
protocolmessageequiv 3
provide 1
pthread 1
ptr 14
public 8
purpose 1
putting 1
qualified 1
qualify 1
quickly 1
race 1
rationale 1
re 1
reached 1
read 1
real 2
really 6
reasonable 1
reasons: 1
recently 1
recommended 1
redefined 1
redirection 1
reference 6
references 3
regex 1
related: 1
remember 4
report 3
requested 1
require 2
requirement 1
requirements 1
requires 2
rerun 1
reserved 1
reserves 2
resources 1
respective 1
result 1
return 8
returns 1
reuse 1
reused 1
reveal 1
right 2
room 1
rot 1
rough 1
routines 1
rule 5
run 14
run_all_tests 7
running 6
runs 3
runtime 1
s 25
safe 1
safely 1
safer 1
same 14
sample5_unittest 2
samples 1
satisfy 1
say 5
search 1
second 1
section 1
see 11
seem 1
seems 2
seg 1
semantics 1
sense 1
sensitive 1
separate 4
services 1
set 7
sets 1
setup 11
setuptestsuite 2
several 3
share 2
shared 1
shell 1
should 7
shouldn 2
show 1
shown 1
side 5
significant 1
silver 1
similarly 1
simple 3
simple: 1
simplicity 2
simply 1
since 4
single 1
singleton 1
situation: 1
sizeof 2
slightly 1
slower 1
sniffing 1
sniffs 1
so 12
solution 3
some 14
some_expression 1
someone 1
something 1
sometimes 3
sorry 1
space 2
special 2
spell 2
split 1
splitting 1
standard 3
start 3
starts 3
state 1
statement 9
statements 1
states 1
static 6
statically 2
std::ostream 2
stderr 1
stdout 1
still 3
stl 1
streaming 1
strong 1
strongly 1
style 3
sub 2
subclass 4
subclassing 1
subroutine 1
subtle 1
succeed 4
succeeds 1
successful 1
such 7
suffer 1
suggest 1
suite 12
suites 6
support 5
suppress 1
sure 7
switch 1
syntax 3
system 2
t 29
targets 1
team 1
tear 5
teardown 10
tedious 1
template 4
temporarily 3
test 102
test_f 24
testing 3
testname 7
testonly 2
tests 38
testsuitename 8
testsuitename__bar_test 1
testsuitename_bar__test 1
testsuitename_testname_test 1
textual 1
than 4
thanks 1
that 50
the 237
their 3
them 5
then 8
there 9
therefore 12
these 3
they 7
thing 2
things 2
think 2
third 1
this 36
this: 2
though 1
thread 10
threads 7
threadsafe 1
throw 3
throwing 1
thus 4
time 6
time_flies 1
time_flies_like_an_arrow_test 1
times 1
tip 1
tips 1
to 140
tolerant 1
took 1
tools 1
tricks 2
trivial 1
try 4
turning 1
twice 1
two 5
txt 1
type 6
typed 5
typedef 3
typeparam 2
types 2
typically 1
unclean 1
undefined 3
under 2
underscore 3
underscores 1
understand 2
unexpected 1
unified 1
uninitialized 1
universe 1
up 13
upper 3
usage 1
use 31
used 6
useful 2
user 5
users 1
uses 3
using 18
usually 2
uvw 3
valid 3
value 18
variable 1
variables 9
various 2
verifies 2
version 2
versions 2
very 2
via 1
violate 1
virtual 4
visual 1
void 6
vs 1
want 9
wanted 1
wants 1
was 3
wasn 1
way 8
ways 1
we 28
week 1
weird 1
well 3
were 5
what 9
when 18
where 7
wherever 1
whether 2
which 19
while 1
whole 2
why 10
wiggle 1
wiki 2
wikipedia 2
will 19
windows 2
with 28
without 1
won 2
wonder 1
words 1
work 6
workaround 2
works 4
work—see 1
worse 1
would 3
wrappers 1
write 11
writing 1
wrong 4
x 1
xyz 5
yes 2
you 89
your 25
